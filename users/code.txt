Source Code for Inspection 
S261-11d
#=== From users/models.py ===


 UserProfile(models.Model):
    user = models.OneToOneField(User, primary_key=True)
    #reference id. This id is used to hind user primary key
    ref_id = models.CharField(max_length=120, default='abc', unique=True)
    fName = models.CharField(max_length=40, verbose_name ="First Name")
    lName = models.CharField(max_length=40, verbose_name ="Last Name", )
    mName = models.CharField(max_length=40, verbose_name ="Middle Name", blank=True )
    dOB = models.DateField()
    sSN = USSocialSecurityNumberField(verbose_name ="SSN", unique=True, )
    phoneNumber = PhoneNumberField(null=True, verbose_name ="Phone")
    streetAddress = models.CharField(max_length=100, verbose_name ="Street")
    city = models.CharField(max_length=30, verbose_name ="City")
    state = USStateField(verbose_name ="State")
    zipcode = USZipCodeField(verbose_name ="Zipcode")
    email = models.EmailField(max_length=75, verbose_name ="Email", unique=True)
    dateJoin = models.DateField(auto_now_add=True, auto_now=False)
    updated = models.DateTimeField(auto_now_add=False, auto_now=True)

    def __str__(self):
        return self.user.username

    '''return url for user object'''
    def get_absolute_url(self):
        return reverse('userprofile-detail', kwargs={'ref_id':self.ref_id})

class Employee(models.Model):
    employee = models.OneToOneField(User, primary_key=True, verbose_name="Employee username")
    
    EMPLOYEE_CHOICES = (
        ('D', 'Doctor'),
        ('N', 'Nurse'),
        ('R', 'Receptionist'),
        )
    #to translate, use get_employee_type_display
    employee_type = models.CharField(max_length=1, choices=EMPLOYEE_CHOICES)
    

    def __str__(self):
        return self.employee_type + " " + self.employee.username
    def _employee_info(self):
        info = self.employee_type + " " + self.employee.username
        return info

class Doctor(models.Model):
    doctor = models.OneToOneField(Employee, primary_key=True, verbose_name="Doctor")
    specialty = models.CharField(max_length=100, default="Unknown")
    available = models.BooleanField(default=True)
    max_patients = models.PositiveSmallIntegerField(default=10)
    current_patient_count = models.PositiveSmallIntegerField(default=0)

    def __str__(self):
        return self.doctor._employee_info()

    @classmethod
    def create(doc, employee):
        doctor = doc(doctor=employee)
        return doctor


class Patient(models.Model):
    patient = models.OneToOneField(User,primary_key=True, verbose_name="Patient")
    is_active = models.BooleanField(default=False)
    primary_doctor = models.ForeignKey(Doctor, verbose_name="Primary Doctor",related_name="primary_doctor", null=True)
    doctors = models.ManyToManyField(Doctor, verbose_name="Doctors", null=True)
    primary_nurse = models.ForeignKey(Nurse, verbose_name="Primary Nurse", related_name="primary_nurse", null=True)
    nurses = models.ManyToManyField(Nurse, verbose_name="Nurses", null=True)

    class Meta:
        permissions = (
            ("read_patient", "can view patient"),
            ("admit_patient", "can admit patient"),
            #to discharge patient, allow to change is_active to false
            ("discharge_patient", "can discharge patient"),
        )
        
    def __str__(self):
        return self.patient.username


#===== From accounts/views.py =====

def account_login(request, 
    template_name='accounts/account_login_form.html'):

    context = {}
    if request.user.is_authenticated():
        messages.info(request, 'You have already logged in')
        return redirect('/account/message')

    if request.method =='POST':
        form = AuthenticationForm(request, request.POST)
        if form.is_valid():
            user = form.get_user()
            auth_login(request,user)
            messages.success(request, 'You have successfully logged in')
            #check if user is an active patient and notify him/her 
            try:
                if user.patient:
                    if not user.patient.is_active:
                        messages.info(request,'You are not registered as our patient yet. Please contact us for more information')
            except:
                #pass if user is employee
                pass
            return redirect('/account/message')
        else:
            messages.error(request, 'Please enter a correct username and password. Note that both fields may be case-sensitive.')
    else:
        form = AuthenticationForm()
    context['form'] = form
    return render(request, template_name,context)


